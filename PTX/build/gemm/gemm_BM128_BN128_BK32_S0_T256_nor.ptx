//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_80
.address_size 64

	// .globl	main_kernel
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cute7productE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cute1_E[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std3__45__cpo5beginE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std3__45__cpo3endE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std3__45__cpo6cbeginE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std3__45__cpo4cendE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std3__419piecewise_constructE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std6ranges3__45__cpo4swapE[1];
.global .align 1 .b8 _ZN67_INTERNAL_2661fc33_36_gemm_BM128_BN128_BK32_S0_T256_nor_cu_cc9b6e384cuda3std6ranges3__45__cpo9iter_moveE[1];
.extern .shared .align 1024 .b8 buf_dyn_shmem[];

.visible .entry main_kernel(
	.param .u64 main_kernel_param_0,
	.param .u64 main_kernel_param_1,
	.param .u64 main_kernel_param_2
)
.maxntid 256, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<193>;
	.reg .f32 	%f<705>;
	.reg .b32 	%r<426>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd8, [main_kernel_param_0];
	ld.param.u64 	%rd9, [main_kernel_param_1];
	cvta.to.global.u64 	%rd11, %rd9;
	mov.u32 	%r20, %tid.x;
	shr.s32 	%r21, %r20, 2;
	shl.b32 	%r22, %r21, 5;
	shr.u32 	%r23, %r20, 4;
	and.b32  	%r24, %r20, 2;
	shr.u32 	%r25, %r24, 1;
	add.s32 	%r26, %r25, %r23;
	shl.b32 	%r27, %r26, 4;
	and.b32  	%r28, %r27, 16;
	and.b32  	%r29, %r20, 8;
	shr.u32 	%r30, %r29, 3;
	add.s32 	%r31, %r30, %r20;
	shl.b32 	%r32, %r31, 3;
	and.b32  	%r33, %r32, 8;
	or.b32  	%r34, %r28, %r22;
	or.b32  	%r35, %r34, %r33;
	mov.u32 	%r36, %ctaid.y;
	shl.b32 	%r1, %r36, 19;
	shl.b32 	%r37, %r20, 3;
	and.b32  	%r38, %r37, 24;
	shr.s32 	%r39, %r20, 31;
	shr.u32 	%r40, %r39, 28;
	add.s32 	%r41, %r20, %r40;
	and.b32  	%r42, %r41, -16;
	sub.s32 	%r43, %r20, %r42;
	shr.u32 	%r44, %r43, 31;
	add.s32 	%r45, %r43, %r44;
	shr.s32 	%r46, %r45, 1;
	shr.s32 	%r47, %r45, 31;
	shr.u32 	%r48, %r47, 30;
	add.s32 	%r49, %r46, %r48;
	and.b32  	%r50, %r49, -4;
	sub.s32 	%r51, %r46, %r50;
	shr.u32 	%r52, %r41, 31;
	shr.s32 	%r53, %r41, 4;
	add.s32 	%r54, %r53, %r52;
	and.b32  	%r55, %r54, -2;
	sub.s32 	%r56, %r53, %r55;
	shl.b32 	%r57, %r51, 6;
	and.b32  	%r58, %r57, 192;
	shl.b32 	%r59, %r56, 3;
	and.b32  	%r60, %r59, 8;
	or.b32  	%r61, %r58, %r60;
	and.b32  	%r62, %r45, 134217726;
	sub.s32 	%r63, %r43, %r62;
	shl.b32 	%r64, %r63, 5;
	shr.s32 	%r65, %r43, 31;
	shr.u32 	%r66, %r65, 29;
	add.s32 	%r67, %r43, %r66;
	shl.b32 	%r68, %r67, 5;
	and.b32  	%r69, %r68, 2147483392;
	add.s32 	%r70, %r64, %r69;
	shr.u32 	%r71, %r39, 27;
	add.s32 	%r72, %r20, %r71;
	shr.u32 	%r73, %r72, 31;
	shr.s32 	%r74, %r72, 5;
	add.s32 	%r75, %r74, %r73;
	and.b32  	%r76, %r75, 4194302;
	sub.s32 	%r77, %r74, %r76;
	shl.b32 	%r78, %r77, 9;
	add.s32 	%r79, %r70, %r78;
	and.b32  	%r80, %r51, 2;
	setp.eq.s32 	%p1, %r80, 0;
	shr.u32 	%r81, %r58, 3;
	xor.b32  	%r82, %r61, %r81;
	add.s32 	%r83, %r79, %r82;
	shr.u32 	%r84, %r39, 29;
	add.s32 	%r85, %r20, %r84;
	and.b32  	%r86, %r85, -8;
	sub.s32 	%r87, %r20, %r86;
	shr.u32 	%r88, %r87, 31;
	add.s32 	%r89, %r87, %r88;
	shr.s32 	%r90, %r89, 1;
	mov.u32 	%r425, 0;
	shl.b32 	%r91, %r90, 6;
	and.b32  	%r92, %r91, 192;
	and.b32  	%r93, %r85, 8;
	or.b32  	%r94, %r92, %r93;
	and.b32  	%r95, %r89, 67108862;
	sub.s32 	%r96, %r87, %r95;
	shl.b32 	%r97, %r96, 5;
	shl.b32 	%r98, %r56, 10;
	shr.u32 	%r99, %r39, 26;
	add.s32 	%r100, %r20, %r99;
	shl.b32 	%r101, %r100, 2;
	and.b32  	%r102, %r101, 2147483392;
	add.s32 	%r103, %r98, %r102;
	add.s32 	%r104, %r103, %r97;
	and.b32  	%r105, %r90, 2;
	setp.eq.s32 	%p2, %r105, 0;
	shr.u32 	%r106, %r92, 3;
	xor.b32  	%r107, %r94, %r106;
	add.s32 	%r108, %r104, %r107;
	shl.b32 	%r109, %r35, 1;
	mov.u32 	%r110, buf_dyn_shmem;
	add.s32 	%r3, %r110, %r109;
	shl.b32 	%r111, %r83, 1;
	add.s32 	%r4, %r110, %r111;
	add.s32 	%r5, %r4, 2048;
	add.s32 	%r6, %r4, 4096;
	add.s32 	%r7, %r4, 6144;
	shl.b32 	%r112, %r108, 1;
	add.s32 	%r113, %r110, %r112;
	add.s32 	%r8, %r113, 8192;
	add.s32 	%r9, %r113, 12288;
	selp.b32 	%r114, 32, -32, %p1;
	add.s32 	%r10, %r4, %r114;
	add.s32 	%r11, %r10, 2048;
	add.s32 	%r12, %r10, 4096;
	add.s32 	%r13, %r10, 6144;
	selp.b32 	%r115, 32, -32, %p2;
	add.s32 	%r14, %r8, %r115;
	add.s32 	%r15, %r14, 4096;
	mov.u32 	%r16, %ctaid.x;
	shl.b32 	%r116, %r16, 19;
	or.b32  	%r117, %r38, %r116;
	shl.b32 	%r118, %r21, 12;
	add.s32 	%r119, %r117, %r118;
	mul.wide.s32 	%rd12, %r119, 2;
	add.s64 	%rd20, %rd11, %rd12;
	or.b32  	%r120, %r38, %r1;
	add.s32 	%r121, %r120, %r118;
	cvta.to.global.u64 	%rd13, %rd8;
	mul.wide.s32 	%rd14, %r121, 2;
	add.s64 	%rd19, %rd13, %rd14;
	mov.f32 	%f641, 0f00000000;
	mov.f32 	%f642, %f641;
	mov.f32 	%f643, %f641;
	mov.f32 	%f644, %f641;
	mov.f32 	%f645, %f641;
	mov.f32 	%f646, %f641;
	mov.f32 	%f647, %f641;
	mov.f32 	%f648, %f641;
	mov.f32 	%f649, %f641;
	mov.f32 	%f650, %f641;
	mov.f32 	%f651, %f641;
	mov.f32 	%f652, %f641;
	mov.f32 	%f653, %f641;
	mov.f32 	%f654, %f641;
	mov.f32 	%f655, %f641;
	mov.f32 	%f656, %f641;
	mov.f32 	%f657, %f641;
	mov.f32 	%f658, %f641;
	mov.f32 	%f659, %f641;
	mov.f32 	%f660, %f641;
	mov.f32 	%f661, %f641;
	mov.f32 	%f662, %f641;
	mov.f32 	%f663, %f641;
	mov.f32 	%f664, %f641;
	mov.f32 	%f665, %f641;
	mov.f32 	%f666, %f641;
	mov.f32 	%f667, %f641;
	mov.f32 	%f668, %f641;
	mov.f32 	%f669, %f641;
	mov.f32 	%f670, %f641;
	mov.f32 	%f671, %f641;
	mov.f32 	%f672, %f641;
	mov.f32 	%f673, %f641;
	mov.f32 	%f674, %f641;
	mov.f32 	%f675, %f641;
	mov.f32 	%f676, %f641;
	mov.f32 	%f677, %f641;
	mov.f32 	%f678, %f641;
	mov.f32 	%f679, %f641;
	mov.f32 	%f680, %f641;
	mov.f32 	%f681, %f641;
	mov.f32 	%f682, %f641;
	mov.f32 	%f683, %f641;
	mov.f32 	%f684, %f641;
	mov.f32 	%f685, %f641;
	mov.f32 	%f686, %f641;
	mov.f32 	%f687, %f641;
	mov.f32 	%f688, %f641;
	mov.f32 	%f689, %f641;
	mov.f32 	%f690, %f641;
	mov.f32 	%f691, %f641;
	mov.f32 	%f692, %f641;
	mov.f32 	%f693, %f641;
	mov.f32 	%f694, %f641;
	mov.f32 	%f695, %f641;
	mov.f32 	%f696, %f641;
	mov.f32 	%f697, %f641;
	mov.f32 	%f698, %f641;
	mov.f32 	%f699, %f641;
	mov.f32 	%f700, %f641;
	mov.f32 	%f701, %f641;
	mov.f32 	%f702, %f641;
	mov.f32 	%f703, %f641;
	mov.f32 	%f704, %f641;

$L__BB0_1:
	bar.sync 	0;
	ld.global.nc.v4.u32 	{%r374, %r375, %r376, %r377}, [%rd19];
	st.shared.v4.u32 	[%r3], {%r374, %r375, %r376, %r377};
	ld.global.nc.v4.u32 	{%r382, %r383, %r384, %r385}, [%rd19+524288];
	st.shared.v4.u32 	[%r3+4096], {%r382, %r383, %r384, %r385};
	ld.global.nc.v4.u32 	{%r390, %r391, %r392, %r393}, [%rd20];
	st.shared.v4.u32 	[%r3+8192], {%r390, %r391, %r392, %r393};
	ld.global.nc.v4.u32 	{%r398, %r399, %r400, %r401}, [%rd20+524288];
	st.shared.v4.u32 	[%r3+12288], {%r398, %r399, %r400, %r401};
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r122, %r123, %r124, %r125}, [%r4];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r127, %r128, %r129, %r130}, [%r5];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r132, %r133, %r134, %r135}, [%r6];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r137, %r138, %r139, %r140}, [%r7];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r142, %r143, %r144, %r145}, [%r8];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r147, %r148, %r149, %r150}, [%r9];

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f193,  %f194,  %f195,  %f196},{%r122,  %r123,  %r124,  %r125},{%r142,  %r143},{%f704, %f703, %f702, %f701};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f201,  %f202,  %f203,  %f204},{%r127,  %r128,  %r129,  %r130},{%r142,  %r143},{%f700, %f699, %f698, %f697};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f209,  %f210,  %f211,  %f212},{%r132,  %r133,  %r134,  %r135},{%r142,  %r143},{%f696, %f695, %f694, %f693};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f217,  %f218,  %f219,  %f220},{%r137,  %r138,  %r139,  %r140},{%r142,  %r143},{%f692, %f691, %f690, %f689};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f225,  %f226,  %f227,  %f228},{%r137,  %r138,  %r139,  %r140},{%r144,  %r145},{%f676, %f675, %f674, %f673};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f233,  %f234,  %f235,  %f236},{%r132,  %r133,  %r134,  %r135},{%r144,  %r145},{%f680, %f679, %f678, %f677};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f241,  %f242,  %f243,  %f244},{%r127,  %r128,  %r129,  %r130},{%r144,  %r145},{%f684, %f683, %f682, %f681};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f249,  %f250,  %f251,  %f252},{%r122,  %r123,  %r124,  %r125},{%r144,  %r145},{%f688, %f687, %f686, %f685};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f257,  %f258,  %f259,  %f260},{%r122,  %r123,  %r124,  %r125},{%r147,  %r148},{%f672, %f671, %f670, %f669};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f265,  %f266,  %f267,  %f268},{%r127,  %r128,  %r129,  %r130},{%r147,  %r148},{%f668, %f667, %f666, %f665};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f273,  %f274,  %f275,  %f276},{%r132,  %r133,  %r134,  %r135},{%r147,  %r148},{%f664, %f663, %f662, %f661};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f281,  %f282,  %f283,  %f284},{%r137,  %r138,  %r139,  %r140},{%r147,  %r148},{%f660, %f659, %f658, %f657};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f289,  %f290,  %f291,  %f292},{%r137,  %r138,  %r139,  %r140},{%r149,  %r150},{%f644, %f643, %f642, %f641};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f297,  %f298,  %f299,  %f300},{%r132,  %r133,  %r134,  %r135},{%r149,  %r150},{%f648, %f647, %f646, %f645};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f305,  %f306,  %f307,  %f308},{%r127,  %r128,  %r129,  %r130},{%r149,  %r150},{%f652, %f651, %f650, %f649};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f313,  %f314,  %f315,  %f316},{%r122,  %r123,  %r124,  %r125},{%r149,  %r150},{%f656, %f655, %f654, %f653};

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r248, %r249, %r250, %r251}, [%r10];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r253, %r254, %r255, %r256}, [%r11];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r258, %r259, %r260, %r261}, [%r12];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r263, %r264, %r265, %r266}, [%r13];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r268, %r269, %r270, %r271}, [%r14];

	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%r273, %r274, %r275, %r276}, [%r15];

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f704,  %f703,  %f702,  %f701},{%r248,  %r249,  %r250,  %r251},{%r268,  %r269},{%f193, %f194, %f195, %f196};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f700,  %f699,  %f698,  %f697},{%r253,  %r254,  %r255,  %r256},{%r268,  %r269},{%f201, %f202, %f203, %f204};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f696,  %f695,  %f694,  %f693},{%r258,  %r259,  %r260,  %r261},{%r268,  %r269},{%f209, %f210, %f211, %f212};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f692,  %f691,  %f690,  %f689},{%r263,  %r264,  %r265,  %r266},{%r268,  %r269},{%f217, %f218, %f219, %f220};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f676,  %f675,  %f674,  %f673},{%r263,  %r264,  %r265,  %r266},{%r270,  %r271},{%f225, %f226, %f227, %f228};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f680,  %f679,  %f678,  %f677},{%r258,  %r259,  %r260,  %r261},{%r270,  %r271},{%f233, %f234, %f235, %f236};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f684,  %f683,  %f682,  %f681},{%r253,  %r254,  %r255,  %r256},{%r270,  %r271},{%f241, %f242, %f243, %f244};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f688,  %f687,  %f686,  %f685},{%r248,  %r249,  %r250,  %r251},{%r270,  %r271},{%f249, %f250, %f251, %f252};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f672,  %f671,  %f670,  %f669},{%r248,  %r249,  %r250,  %r251},{%r273,  %r274},{%f257, %f258, %f259, %f260};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f668,  %f667,  %f666,  %f665},{%r253,  %r254,  %r255,  %r256},{%r273,  %r274},{%f265, %f266, %f267, %f268};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f664,  %f663,  %f662,  %f661},{%r258,  %r259,  %r260,  %r261},{%r273,  %r274},{%f273, %f274, %f275, %f276};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f660,  %f659,  %f658,  %f657},{%r263,  %r264,  %r265,  %r266},{%r273,  %r274},{%f281, %f282, %f283, %f284};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f644,  %f643,  %f642,  %f641},{%r263,  %r264,  %r265,  %r266},{%r275,  %r276},{%f289, %f290, %f291, %f292};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f648,  %f647,  %f646,  %f645},{%r258,  %r259,  %r260,  %r261},{%r275,  %r276},{%f297, %f298, %f299, %f300};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f652,  %f651,  %f650,  %f649},{%r253,  %r254,  %r255,  %r256},{%r275,  %r276},{%f305, %f306, %f307, %f308};

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 {%f656,  %f655,  %f654,  %f653},{%r248,  %r249,  %r250,  %r251},{%r275,  %r276},{%f313, %f314, %f315, %f316};

	// end inline asm
	add.s64 	%rd20, %rd20, 64;
	add.s64 	%rd19, %rd19, 64;
	add.s32 	%r425, %r425, 1;
	setp.ne.s32 	%p3, %r425, 128;
	@%p3 bra 	$L__BB0_1;

	mov.u32 	%r424, %tid.x;
	ld.param.u64 	%rd18, [main_kernel_param_2];
	cvta.to.global.u64 	%rd17, %rd18;
	and.b32  	%r423, %r424, 3;
	mov.u32 	%r422, %ctaid.y;
	shl.b32 	%r421, %r422, 19;
	mov.u32 	%r420, %ctaid.x;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs1, %f704;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f450, %rs1;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs4, %f703;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f453, %rs4;}

	// end inline asm
	shl.b32 	%r407, %r424, 11;
	and.b32  	%r408, %r407, 65536;
	shl.b32 	%r409, %r424, 10;
	and.b32  	%r410, %r409, 28672;
	shr.s32 	%r411, %r424, 6;
	shl.b32 	%r412, %r411, 3;
	shl.b32 	%r413, %r420, 7;
	add.s32 	%r414, %r413, %r421;
	add.s32 	%r415, %r414, %r408;
	add.s32 	%r416, %r415, %r412;
	shl.b32 	%r417, %r423, 1;
	add.s32 	%r418, %r416, %r417;
	add.s32 	%r419, %r418, %r410;
	mul.wide.s32 	%rd15, %r419, 2;
	add.s64 	%rd16, %rd17, %rd15;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs6, %f453;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs3, %f450;}

	// end inline asm
	st.global.v2.u16 	[%rd16], {%rs3, %rs6};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs7, %f702;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f456, %rs7;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs10, %f701;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f459, %rs10;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs12, %f459;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs9, %f456;}

	// end inline asm
	st.global.v2.u16 	[%rd16+65536], {%rs9, %rs12};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs13, %f700;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f462, %rs13;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs16, %f699;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f465, %rs16;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs18, %f465;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs15, %f462;}

	// end inline asm
	st.global.v2.u16 	[%rd16+262144], {%rs15, %rs18};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs19, %f698;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f468, %rs19;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs22, %f697;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f471, %rs22;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs24, %f471;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs21, %f468;}

	// end inline asm
	st.global.v2.u16 	[%rd16+327680], {%rs21, %rs24};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs25, %f696;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f474, %rs25;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs28, %f695;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f477, %rs28;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs30, %f477;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs27, %f474;}

	// end inline asm
	st.global.v2.u16 	[%rd16+524288], {%rs27, %rs30};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs31, %f694;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f480, %rs31;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs34, %f693;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f483, %rs34;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs36, %f483;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs33, %f480;}

	// end inline asm
	st.global.v2.u16 	[%rd16+589824], {%rs33, %rs36};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f692;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f486, %rs37;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f691;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f489, %rs40;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs42, %f489;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f486;}

	// end inline asm
	st.global.v2.u16 	[%rd16+786432], {%rs39, %rs42};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs43, %f690;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f492, %rs43;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs46, %f689;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f495, %rs46;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs48, %f495;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs45, %f492;}

	// end inline asm
	st.global.v2.u16 	[%rd16+851968], {%rs45, %rs48};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs49, %f688;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f498, %rs49;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs52, %f687;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f501, %rs52;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs54, %f501;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs51, %f498;}

	// end inline asm
	st.global.v2.u16 	[%rd16+64], {%rs51, %rs54};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs55, %f686;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f504, %rs55;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs58, %f685;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f507, %rs58;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs60, %f507;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs57, %f504;}

	// end inline asm
	st.global.v2.u16 	[%rd16+65600], {%rs57, %rs60};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs61, %f684;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f510, %rs61;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs64, %f683;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f513, %rs64;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs66, %f513;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs63, %f510;}

	// end inline asm
	st.global.v2.u16 	[%rd16+262208], {%rs63, %rs66};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs67, %f682;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f516, %rs67;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs70, %f681;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f519, %rs70;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs72, %f519;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs69, %f516;}

	// end inline asm
	st.global.v2.u16 	[%rd16+327744], {%rs69, %rs72};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs73, %f680;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f522, %rs73;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs76, %f679;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f525, %rs76;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs78, %f525;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs75, %f522;}

	// end inline asm
	st.global.v2.u16 	[%rd16+524352], {%rs75, %rs78};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs79, %f678;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f528, %rs79;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs82, %f677;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f531, %rs82;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs84, %f531;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs81, %f528;}

	// end inline asm
	st.global.v2.u16 	[%rd16+589888], {%rs81, %rs84};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs85, %f676;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f534, %rs85;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs88, %f675;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f537, %rs88;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs90, %f537;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs87, %f534;}

	// end inline asm
	st.global.v2.u16 	[%rd16+786496], {%rs87, %rs90};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs91, %f674;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f540, %rs91;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs94, %f673;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f543, %rs94;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs96, %f543;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs93, %f540;}

	// end inline asm
	st.global.v2.u16 	[%rd16+852032], {%rs93, %rs96};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs97, %f672;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f546, %rs97;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs100, %f671;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f549, %rs100;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs102, %f549;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs99, %f546;}

	// end inline asm
	st.global.v2.u16 	[%rd16+128], {%rs99, %rs102};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs103, %f670;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f552, %rs103;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs106, %f669;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f555, %rs106;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs108, %f555;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs105, %f552;}

	// end inline asm
	st.global.v2.u16 	[%rd16+65664], {%rs105, %rs108};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs109, %f668;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f558, %rs109;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs112, %f667;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f561, %rs112;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs114, %f561;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs111, %f558;}

	// end inline asm
	st.global.v2.u16 	[%rd16+262272], {%rs111, %rs114};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs115, %f666;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f564, %rs115;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs118, %f665;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f567, %rs118;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs120, %f567;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs117, %f564;}

	// end inline asm
	st.global.v2.u16 	[%rd16+327808], {%rs117, %rs120};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs121, %f664;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f570, %rs121;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs124, %f663;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f573, %rs124;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs126, %f573;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs123, %f570;}

	// end inline asm
	st.global.v2.u16 	[%rd16+524416], {%rs123, %rs126};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs127, %f662;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f576, %rs127;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs130, %f661;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f579, %rs130;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs132, %f579;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs129, %f576;}

	// end inline asm
	st.global.v2.u16 	[%rd16+589952], {%rs129, %rs132};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs133, %f660;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f582, %rs133;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs136, %f659;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f585, %rs136;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs138, %f585;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs135, %f582;}

	// end inline asm
	st.global.v2.u16 	[%rd16+786560], {%rs135, %rs138};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs139, %f658;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f588, %rs139;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs142, %f657;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f591, %rs142;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs144, %f591;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs141, %f588;}

	// end inline asm
	st.global.v2.u16 	[%rd16+852096], {%rs141, %rs144};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs145, %f656;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f594, %rs145;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs148, %f655;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f597, %rs148;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs150, %f597;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs147, %f594;}

	// end inline asm
	st.global.v2.u16 	[%rd16+192], {%rs147, %rs150};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs151, %f654;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f600, %rs151;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs154, %f653;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f603, %rs154;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs156, %f603;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs153, %f600;}

	// end inline asm
	st.global.v2.u16 	[%rd16+65728], {%rs153, %rs156};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs157, %f652;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f606, %rs157;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs160, %f651;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f609, %rs160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs162, %f609;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs159, %f606;}

	// end inline asm
	st.global.v2.u16 	[%rd16+262336], {%rs159, %rs162};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs163, %f650;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f612, %rs163;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs166, %f649;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f615, %rs166;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs168, %f615;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs165, %f612;}

	// end inline asm
	st.global.v2.u16 	[%rd16+327872], {%rs165, %rs168};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs169, %f648;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f618, %rs169;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs172, %f647;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f621, %rs172;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs174, %f621;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs171, %f618;}

	// end inline asm
	st.global.v2.u16 	[%rd16+524480], {%rs171, %rs174};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs175, %f646;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f624, %rs175;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs178, %f645;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f627, %rs178;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs180, %f627;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs177, %f624;}

	// end inline asm
	st.global.v2.u16 	[%rd16+590016], {%rs177, %rs180};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs181, %f644;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f630, %rs181;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs184, %f643;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f633, %rs184;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs186, %f633;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs183, %f630;}

	// end inline asm
	st.global.v2.u16 	[%rd16+786624], {%rs183, %rs186};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs187, %f642;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f636, %rs187;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs190, %f641;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f639, %rs190;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs192, %f639;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs189, %f636;}

	// end inline asm
	st.global.v2.u16 	[%rd16+852160], {%rs189, %rs192};
	ret;

}

