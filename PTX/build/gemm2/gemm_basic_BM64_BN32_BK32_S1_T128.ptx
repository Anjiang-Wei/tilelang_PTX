//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_80
.address_size 64

	// .globl	main_kernel
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cute7productE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cute1_E[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std3__45__cpo5beginE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std3__45__cpo3endE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std3__45__cpo6cbeginE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std3__45__cpo4cendE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std3__419piecewise_constructE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std6ranges3__45__cpo4swapE[1];
.global .align 1 .b8 _ZN67_INTERNAL_1392aef2_36_gemm_basic_BM64_BN32_BK32_S1_T128_cu_cc9b6e384cuda3std6ranges3__45__cpo9iter_moveE[1];
.extern .shared .align 1024 .b8 buf_dyn_shmem[];

.visible .entry main_kernel(
	.param .u64 main_kernel_param_0,
	.param .u64 main_kernel_param_1,
	.param .u64 main_kernel_param_2
)
.maxntid 128, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<81>;
	.reg .f32 	%f<193>;
	.reg .b32 	%r<77>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [main_kernel_param_0];
	ld.param.u64 	%rd2, [main_kernel_param_1];
	ld.param.u64 	%rd3, [main_kernel_param_2];
	mov.u32 	%r74, 0;
	mov.f32 	%f177, 0f00000000;
	mov.u32 	%r10, %tid.x;
	shl.b32 	%r11, %r10, 6;
	and.b32  	%r12, %r11, 1984;
	mov.u32 	%r13, buf_dyn_shmem;
	add.s32 	%r14, %r13, %r12;
	add.s32 	%r2, %r14, 4098;
	cvta.to.global.u64 	%rd4, %rd1;
	shl.b32 	%r25, %r10, 4;
	add.s32 	%r26, %r13, %r25;
	cvta.to.global.u64 	%rd7, %rd2;
	mov.f32 	%f178, %f177;
	mov.f32 	%f179, %f177;
	mov.f32 	%f180, %f177;
	mov.f32 	%f181, %f177;
	mov.f32 	%f182, %f177;
	mov.f32 	%f183, %f177;
	mov.f32 	%f184, %f177;
	mov.f32 	%f185, %f177;
	mov.f32 	%f186, %f177;
	mov.f32 	%f187, %f177;
	mov.f32 	%f188, %f177;
	mov.f32 	%f189, %f177;
	mov.f32 	%f190, %f177;
	mov.f32 	%f191, %f177;
	mov.f32 	%f192, %f177;

$L__BB0_1:
	mov.u32 	%r15, %ctaid.y;
	shl.b32 	%r16, %r15, 17;
	shl.b32 	%r17, %r10, 9;
	and.b32  	%r18, %r17, -2048;
	add.s32 	%r19, %r18, %r16;
	shl.b32 	%r20, %r10, 3;
	and.b32  	%r21, %r20, 24;
	or.b32  	%r22, %r19, %r21;
	shl.b32 	%r23, %r74, 5;
	add.s32 	%r24, %r22, %r23;
	mul.wide.s32 	%rd5, %r24, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.v4.u32 	{%r27, %r28, %r29, %r30}, [%rd6];
	st.shared.v4.u32 	[%r26], {%r27, %r28, %r29, %r30};
	ld.global.nc.v4.u32 	{%r35, %r36, %r37, %r38}, [%rd6+131072];
	st.shared.v4.u32 	[%r26+2048], {%r35, %r36, %r37, %r38};
	mov.u32 	%r43, %ctaid.x;
	shl.b32 	%r44, %r43, 16;
	add.s32 	%r45, %r18, %r44;
	or.b32  	%r46, %r45, %r21;
	add.s32 	%r47, %r46, %r23;
	mul.wide.s32 	%rd8, %r47, 2;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.v4.u32 	{%r48, %r49, %r50, %r51}, [%rd9];
	st.shared.v4.u32 	[%r26+4096], {%r48, %r49, %r50, %r51};
	bar.sync 	0;
	mov.u32 	%r76, 2050;
	mov.u32 	%r75, %r2;

$L__BB0_2:
	shl.b32 	%r57, %r10, 1;
	and.b32  	%r58, %r57, -64;
	add.s32 	%r60, %r13, %r58;
	add.s32 	%r61, %r60, %r76;
	ld.shared.u16 	%rs1, [%r61+-2050];
	// begin inline asm
	{  cvt.f32.f16 %f65, %rs1;}

	// end inline asm
	ld.shared.u16 	%rs2, [%r75+-2];
	// begin inline asm
	{  cvt.f32.f16 %f66, %rs2;}

	// end inline asm
	fma.rn.f32 	%f129, %f65, %f66, %f192;
	ld.shared.u16 	%rs3, [%r61+-1794];
	// begin inline asm
	{  cvt.f32.f16 %f67, %rs3;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f68, %rs2;}

	// end inline asm
	fma.rn.f32 	%f130, %f67, %f68, %f191;
	ld.shared.u16 	%rs5, [%r61+-1538];
	// begin inline asm
	{  cvt.f32.f16 %f69, %rs5;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f70, %rs2;}

	// end inline asm
	fma.rn.f32 	%f131, %f69, %f70, %f190;
	ld.shared.u16 	%rs7, [%r61+-1282];
	// begin inline asm
	{  cvt.f32.f16 %f71, %rs7;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f72, %rs2;}

	// end inline asm
	fma.rn.f32 	%f132, %f71, %f72, %f189;
	ld.shared.u16 	%rs9, [%r61+-1026];
	// begin inline asm
	{  cvt.f32.f16 %f73, %rs9;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f74, %rs2;}

	// end inline asm
	fma.rn.f32 	%f133, %f73, %f74, %f188;
	ld.shared.u16 	%rs11, [%r61+-770];
	// begin inline asm
	{  cvt.f32.f16 %f75, %rs11;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f76, %rs2;}

	// end inline asm
	fma.rn.f32 	%f134, %f75, %f76, %f187;
	ld.shared.u16 	%rs13, [%r61+-514];
	// begin inline asm
	{  cvt.f32.f16 %f77, %rs13;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f78, %rs2;}

	// end inline asm
	fma.rn.f32 	%f135, %f77, %f78, %f186;
	ld.shared.u16 	%rs15, [%r61+-258];
	// begin inline asm
	{  cvt.f32.f16 %f79, %rs15;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f80, %rs2;}

	// end inline asm
	fma.rn.f32 	%f136, %f79, %f80, %f185;
	ld.shared.u16 	%rs17, [%r61+-2];
	// begin inline asm
	{  cvt.f32.f16 %f81, %rs17;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f82, %rs2;}

	// end inline asm
	fma.rn.f32 	%f137, %f81, %f82, %f184;
	ld.shared.u16 	%rs19, [%r61+254];
	// begin inline asm
	{  cvt.f32.f16 %f83, %rs19;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f84, %rs2;}

	// end inline asm
	fma.rn.f32 	%f138, %f83, %f84, %f183;
	ld.shared.u16 	%rs21, [%r61+510];
	// begin inline asm
	{  cvt.f32.f16 %f85, %rs21;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f86, %rs2;}

	// end inline asm
	fma.rn.f32 	%f139, %f85, %f86, %f182;
	ld.shared.u16 	%rs23, [%r61+766];
	// begin inline asm
	{  cvt.f32.f16 %f87, %rs23;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f88, %rs2;}

	// end inline asm
	fma.rn.f32 	%f140, %f87, %f88, %f181;
	ld.shared.u16 	%rs25, [%r61+1022];
	// begin inline asm
	{  cvt.f32.f16 %f89, %rs25;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f90, %rs2;}

	// end inline asm
	fma.rn.f32 	%f141, %f89, %f90, %f180;
	ld.shared.u16 	%rs27, [%r61+1278];
	// begin inline asm
	{  cvt.f32.f16 %f91, %rs27;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f92, %rs2;}

	// end inline asm
	fma.rn.f32 	%f142, %f91, %f92, %f179;
	ld.shared.u16 	%rs29, [%r61+1534];
	// begin inline asm
	{  cvt.f32.f16 %f93, %rs29;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f94, %rs2;}

	// end inline asm
	fma.rn.f32 	%f143, %f93, %f94, %f178;
	ld.shared.u16 	%rs31, [%r61+1790];
	// begin inline asm
	{  cvt.f32.f16 %f95, %rs31;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f96, %rs2;}

	// end inline asm
	fma.rn.f32 	%f144, %f95, %f96, %f177;
	ld.shared.u16 	%rs33, [%r61+-2048];
	// begin inline asm
	{  cvt.f32.f16 %f97, %rs33;}

	// end inline asm
	ld.shared.u16 	%rs34, [%r75];
	// begin inline asm
	{  cvt.f32.f16 %f98, %rs34;}

	// end inline asm
	fma.rn.f32 	%f192, %f97, %f98, %f129;
	ld.shared.u16 	%rs35, [%r61+-1792];
	// begin inline asm
	{  cvt.f32.f16 %f99, %rs35;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f100, %rs34;}

	// end inline asm
	fma.rn.f32 	%f191, %f99, %f100, %f130;
	ld.shared.u16 	%rs37, [%r61+-1536];
	// begin inline asm
	{  cvt.f32.f16 %f101, %rs37;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f102, %rs34;}

	// end inline asm
	fma.rn.f32 	%f190, %f101, %f102, %f131;
	ld.shared.u16 	%rs39, [%r61+-1280];
	// begin inline asm
	{  cvt.f32.f16 %f103, %rs39;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f104, %rs34;}

	// end inline asm
	fma.rn.f32 	%f189, %f103, %f104, %f132;
	ld.shared.u16 	%rs41, [%r61+-1024];
	// begin inline asm
	{  cvt.f32.f16 %f105, %rs41;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f106, %rs34;}

	// end inline asm
	fma.rn.f32 	%f188, %f105, %f106, %f133;
	ld.shared.u16 	%rs43, [%r61+-768];
	// begin inline asm
	{  cvt.f32.f16 %f107, %rs43;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f108, %rs34;}

	// end inline asm
	fma.rn.f32 	%f187, %f107, %f108, %f134;
	ld.shared.u16 	%rs45, [%r61+-512];
	// begin inline asm
	{  cvt.f32.f16 %f109, %rs45;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f110, %rs34;}

	// end inline asm
	fma.rn.f32 	%f186, %f109, %f110, %f135;
	ld.shared.u16 	%rs47, [%r61+-256];
	// begin inline asm
	{  cvt.f32.f16 %f111, %rs47;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f112, %rs34;}

	// end inline asm
	fma.rn.f32 	%f185, %f111, %f112, %f136;
	ld.shared.u16 	%rs49, [%r61];
	// begin inline asm
	{  cvt.f32.f16 %f113, %rs49;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f114, %rs34;}

	// end inline asm
	fma.rn.f32 	%f184, %f113, %f114, %f137;
	ld.shared.u16 	%rs51, [%r61+256];
	// begin inline asm
	{  cvt.f32.f16 %f115, %rs51;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f116, %rs34;}

	// end inline asm
	fma.rn.f32 	%f183, %f115, %f116, %f138;
	ld.shared.u16 	%rs53, [%r61+512];
	// begin inline asm
	{  cvt.f32.f16 %f117, %rs53;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f118, %rs34;}

	// end inline asm
	fma.rn.f32 	%f182, %f117, %f118, %f139;
	ld.shared.u16 	%rs55, [%r61+768];
	// begin inline asm
	{  cvt.f32.f16 %f119, %rs55;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f120, %rs34;}

	// end inline asm
	fma.rn.f32 	%f181, %f119, %f120, %f140;
	ld.shared.u16 	%rs57, [%r61+1024];
	// begin inline asm
	{  cvt.f32.f16 %f121, %rs57;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f122, %rs34;}

	// end inline asm
	fma.rn.f32 	%f180, %f121, %f122, %f141;
	ld.shared.u16 	%rs59, [%r61+1280];
	// begin inline asm
	{  cvt.f32.f16 %f123, %rs59;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f124, %rs34;}

	// end inline asm
	fma.rn.f32 	%f179, %f123, %f124, %f142;
	ld.shared.u16 	%rs61, [%r61+1536];
	// begin inline asm
	{  cvt.f32.f16 %f125, %rs61;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f126, %rs34;}

	// end inline asm
	fma.rn.f32 	%f178, %f125, %f126, %f143;
	ld.shared.u16 	%rs63, [%r61+1792];
	// begin inline asm
	{  cvt.f32.f16 %f127, %rs63;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f128, %rs34;}

	// end inline asm
	fma.rn.f32 	%f177, %f127, %f128, %f144;
	add.s32 	%r75, %r75, 4;
	add.s32 	%r76, %r76, 4;
	setp.ne.s32 	%p1, %r76, 2114;
	@%p1 bra 	$L__BB0_2;

	bar.sync 	0;
	add.s32 	%r74, %r74, 1;
	setp.lt.u32 	%p2, %r74, 64;
	@%p2 bra 	$L__BB0_1;

	and.b32  	%r64, %r11, -2048;
	shl.b32 	%r66, %r43, 5;
	add.s32 	%r69, %r66, %r16;
	and.b32  	%r70, %r10, 31;
	or.b32  	%r71, %r69, %r70;
	add.s32 	%r72, %r71, %r64;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs65, %f192;}

	// end inline asm
	cvta.to.global.u64 	%rd10, %rd3;
	mul.wide.s32 	%rd11, %r72, 2;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.u16 	[%rd12], %rs65;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs66, %f191;}

	// end inline asm
	st.global.u16 	[%rd12+16384], %rs66;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs67, %f190;}

	// end inline asm
	st.global.u16 	[%rd12+32768], %rs67;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs68, %f189;}

	// end inline asm
	st.global.u16 	[%rd12+49152], %rs68;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs69, %f188;}

	// end inline asm
	st.global.u16 	[%rd12+65536], %rs69;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs70, %f187;}

	// end inline asm
	st.global.u16 	[%rd12+81920], %rs70;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs71, %f186;}

	// end inline asm
	st.global.u16 	[%rd12+98304], %rs71;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs72, %f185;}

	// end inline asm
	st.global.u16 	[%rd12+114688], %rs72;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs73, %f184;}

	// end inline asm
	st.global.u16 	[%rd12+131072], %rs73;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs74, %f183;}

	// end inline asm
	st.global.u16 	[%rd12+147456], %rs74;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs75, %f182;}

	// end inline asm
	st.global.u16 	[%rd12+163840], %rs75;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs76, %f181;}

	// end inline asm
	st.global.u16 	[%rd12+180224], %rs76;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs77, %f180;}

	// end inline asm
	st.global.u16 	[%rd12+196608], %rs77;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs78, %f179;}

	// end inline asm
	st.global.u16 	[%rd12+212992], %rs78;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs79, %f178;}

	// end inline asm
	st.global.u16 	[%rd12+229376], %rs79;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs80, %f177;}

	// end inline asm
	st.global.u16 	[%rd12+245760], %rs80;
	ret;

}

