//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_80
.address_size 64

	// .globl	main_kernel
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cute7productE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cute1_E[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std3__45__cpo5beginE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std3__45__cpo3endE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std3__45__cpo6cbeginE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std3__45__cpo4cendE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std3__419piecewise_constructE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std6ranges3__45__cpo4swapE[1];
.global .align 1 .b8 _ZN73_INTERNAL_062c8165_42_conv2d_basic_BM64_BN64_BK32_S1_T128_nor_cu_cc9b6e384cuda3std6ranges3__45__cpo9iter_moveE[1];
.extern .shared .align 1024 .b8 buf_dyn_shmem[];

.visible .entry main_kernel(
	.param .u64 main_kernel_param_0,
	.param .u64 main_kernel_param_1,
	.param .u64 main_kernel_param_2
)
.maxntid 128, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<199>;
	.reg .f32 	%f<385>;
	.reg .b32 	%r<184>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [main_kernel_param_0];
	ld.param.u64 	%rd3, [main_kernel_param_1];
	ld.param.u64 	%rd4, [main_kernel_param_2];
	mov.u32 	%r172, 0;
	mov.f32 	%f353, 0f00000000;
	mov.u32 	%r40, %ctaid.y;
	and.b32  	%r41, %r40, 63;
	neg.s32 	%r42, %r41;
	cvta.to.global.u64 	%rd5, %rd2;
	mov.u32 	%r91, %tid.x;
	shl.b32 	%r92, %r91, 3;
	and.b32  	%r93, %r92, 120;
	mov.u32 	%r94, buf_dyn_shmem;
	add.s32 	%r95, %r94, %r93;
	add.s32 	%r28, %r95, 4;
	shl.b32 	%r96, %r91, 2;
	and.b32  	%r97, %r96, -64;
	add.s32 	%r98, %r94, %r97;
	add.s32 	%r29, %r98, 7680;
	shl.b32 	%r99, %r91, 4;
	cvta.to.global.u64 	%rd7, %rd4;
	add.s32 	%r116, %r94, %r99;
	mov.f32 	%f354, %f353;
	mov.f32 	%f355, %f353;
	mov.f32 	%f356, %f353;
	mov.f32 	%f357, %f353;
	mov.f32 	%f358, %f353;
	mov.f32 	%f359, %f353;
	mov.f32 	%f360, %f353;
	mov.f32 	%f361, %f353;
	mov.f32 	%f362, %f353;
	mov.f32 	%f363, %f353;
	mov.f32 	%f364, %f353;
	mov.f32 	%f365, %f353;
	mov.f32 	%f366, %f353;
	mov.f32 	%f367, %f353;
	mov.f32 	%f368, %f353;
	mov.f32 	%f369, %f353;
	mov.f32 	%f370, %f353;
	mov.f32 	%f371, %f353;
	mov.f32 	%f372, %f353;
	mov.f32 	%f373, %f353;
	mov.f32 	%f374, %f353;
	mov.f32 	%f375, %f353;
	mov.f32 	%f376, %f353;
	mov.f32 	%f377, %f353;
	mov.f32 	%f378, %f353;
	mov.f32 	%f379, %f353;
	mov.f32 	%f380, %f353;
	mov.f32 	%f381, %f353;
	mov.f32 	%f382, %f353;
	mov.f32 	%f383, %f353;
	mov.f32 	%f384, %f353;

$L__BB0_1:
	cvt.u16.u32 	%rs1, %r172;
	and.b16  	%rs2, %rs1, 255;
	mul.wide.u16 	%r38, %rs2, -21845;
	shr.u32 	%r39, %r38, 19;
	cvt.u16.u32 	%rs3, %r39;
	setp.ne.s32 	%p1, %r39, %r42;
	add.s32 	%r43, %r41, %r39;
	setp.lt.u32 	%p2, %r43, 65;
	and.pred  	%p3, %p1, %p2;
	mul.lo.s16 	%rs4, %rs3, 12;
	sub.s16 	%rs5, %rs1, %rs4;
	cvt.u32.u16 	%r44, %rs5;
	and.b32  	%r45, %r44, 252;
	shr.u32 	%r46, %r45, 2;
	shr.s32 	%r48, %r91, 2;
	add.s32 	%r49, %r48, %r46;
	add.s32 	%r2, %r49, -1;
	add.s32 	%r50, %r40, %r39;
	shl.b32 	%r51, %r50, 13;
	and.b16  	%rs6, %rs5, 255;
	mul.wide.u16 	%r52, %rs6, 32;
	shl.b32 	%r53, %r48, 7;
	and.b32  	%r55, %r92, 24;
	or.b32  	%r56, %r53, %r55;
	add.s32 	%r57, %r56, %r52;
	add.s32 	%r58, %r57, %r51;
	add.s32 	%r3, %r58, -8320;
	@%p3 bra 	$L__BB0_3;
	bra.uni 	$L__BB0_2;

$L__BB0_3:
	and.b32  	%r71, %r2, -64;
	setp.eq.s32 	%p4, %r71, 0;
	mul.wide.s32 	%rd6, %r3, 2;
	add.s64 	%rd1, %rd5, %rd6;
	@%p4 bra 	$L__BB0_5;

	mov.f32 	%f152, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs23, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs24, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs25, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs26, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs27, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs28, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs29, %f152;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs30, %f152;}

	// end inline asm
	mov.b32 	%r176, {%rs29, %rs30};
	mov.b32 	%r175, {%rs27, %rs28};
	mov.b32 	%r174, {%rs25, %rs26};
	mov.b32 	%r173, {%rs23, %rs24};
	bra.uni 	$L__BB0_6;

$L__BB0_2:
	mov.f32 	%f144, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs7, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs8, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs9, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs10, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs11, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs12, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs13, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs14, %f144;}

	// end inline asm
	mov.b32 	%r59, {%rs13, %rs14};
	mov.b32 	%r60, {%rs11, %rs12};
	mov.b32 	%r61, {%rs9, %rs10};
	mov.b32 	%r62, {%rs7, %rs8};
	st.shared.v4.u32 	[%r116+4096], {%r62, %r61, %r60, %r59};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs15, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs16, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs17, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs18, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs19, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs20, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs21, %f144;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs22, %f144;}

	// end inline asm
	mov.b32 	%r67, {%rs21, %rs22};
	mov.b32 	%r68, {%rs19, %rs20};
	mov.b32 	%r69, {%rs17, %rs18};
	mov.b32 	%r70, {%rs15, %rs16};
	st.shared.v4.u32 	[%r116+6144], {%r70, %r69, %r68, %r67};
	bra.uni 	$L__BB0_10;

$L__BB0_5:
	ld.global.nc.v4.u32 	{%r173, %r174, %r175, %r176}, [%rd1];

$L__BB0_6:
	st.shared.v4.u32 	[%r116+4096], {%r173, %r174, %r175, %r176};
	add.s32 	%r80, %r2, 32;
	and.b32  	%r81, %r80, -64;
	setp.eq.s32 	%p5, %r81, 0;
	@%p5 bra 	$L__BB0_8;

	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs31, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs32, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs33, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs34, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs35, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs36, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f160;}

	// end inline asm
	mov.b32 	%r180, {%rs37, %rs38};
	mov.b32 	%r179, {%rs35, %rs36};
	mov.b32 	%r178, {%rs33, %rs34};
	mov.b32 	%r177, {%rs31, %rs32};
	bra.uni 	$L__BB0_9;

$L__BB0_8:
	ld.global.nc.v4.u32 	{%r177, %r178, %r179, %r180}, [%rd1+8192];

$L__BB0_9:
	st.shared.v4.u32 	[%r116+6144], {%r177, %r178, %r179, %r180};

$L__BB0_10:
	and.b32  	%r100, %r99, -128;
	mov.u32 	%r101, %ctaid.x;
	shl.b32 	%r102, %r101, 6;
	add.s32 	%r103, %r100, %r102;
	and.b32  	%r104, %r92, 56;
	or.b32  	%r105, %r103, %r104;
	shl.b32 	%r106, %r172, 12;
	add.s32 	%r107, %r105, %r106;
	mul.wide.s32 	%rd8, %r107, 2;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.v4.u32 	{%r108, %r109, %r110, %r111}, [%rd9];
	st.shared.v4.u32 	[%r116], {%r108, %r109, %r110, %r111};
	ld.global.nc.v4.u32 	{%r117, %r118, %r119, %r120}, [%rd9+4096];
	st.shared.v4.u32 	[%r116+2048], {%r117, %r118, %r119, %r120};
	bar.sync 	0;
	mov.u32 	%r182, 4096;
	mov.u32 	%r181, %r28;
	mov.u32 	%r183, %r29;

$L__BB0_11:
	ld.shared.u16 	%rs39, [%r183+-3584];
	// begin inline asm
	{  cvt.f32.f16 %f161, %rs39;}

	// end inline asm
	ld.shared.u16 	%rs40, [%r181+-4];
	// begin inline asm
	{  cvt.f32.f16 %f162, %rs40;}

	// end inline asm
	fma.rn.f32 	%f384, %f161, %f162, %f384;
	// begin inline asm
	{  cvt.f32.f16 %f163, %rs39;}

	// end inline asm
	ld.shared.u16 	%rs42, [%r181+-2];
	// begin inline asm
	{  cvt.f32.f16 %f164, %rs42;}

	// end inline asm
	fma.rn.f32 	%f383, %f163, %f164, %f383;
	// begin inline asm
	{  cvt.f32.f16 %f165, %rs39;}

	// end inline asm
	ld.shared.u16 	%rs44, [%r181];
	// begin inline asm
	{  cvt.f32.f16 %f166, %rs44;}

	// end inline asm
	fma.rn.f32 	%f382, %f165, %f166, %f382;
	// begin inline asm
	{  cvt.f32.f16 %f167, %rs39;}

	// end inline asm
	ld.shared.u16 	%rs46, [%r181+2];
	// begin inline asm
	{  cvt.f32.f16 %f168, %rs46;}

	// end inline asm
	fma.rn.f32 	%f381, %f167, %f168, %f381;
	ld.shared.u16 	%rs47, [%r183+-3072];
	// begin inline asm
	{  cvt.f32.f16 %f169, %rs47;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f170, %rs40;}

	// end inline asm
	fma.rn.f32 	%f380, %f169, %f170, %f380;
	// begin inline asm
	{  cvt.f32.f16 %f171, %rs47;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f172, %rs42;}

	// end inline asm
	fma.rn.f32 	%f379, %f171, %f172, %f379;
	// begin inline asm
	{  cvt.f32.f16 %f173, %rs47;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f174, %rs44;}

	// end inline asm
	fma.rn.f32 	%f378, %f173, %f174, %f378;
	// begin inline asm
	{  cvt.f32.f16 %f175, %rs47;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f176, %rs46;}

	// end inline asm
	fma.rn.f32 	%f377, %f175, %f176, %f377;
	ld.shared.u16 	%rs55, [%r183+-2560];
	// begin inline asm
	{  cvt.f32.f16 %f177, %rs55;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f178, %rs40;}

	// end inline asm
	fma.rn.f32 	%f376, %f177, %f178, %f376;
	// begin inline asm
	{  cvt.f32.f16 %f179, %rs55;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f180, %rs42;}

	// end inline asm
	fma.rn.f32 	%f375, %f179, %f180, %f375;
	// begin inline asm
	{  cvt.f32.f16 %f181, %rs55;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f182, %rs44;}

	// end inline asm
	fma.rn.f32 	%f374, %f181, %f182, %f374;
	// begin inline asm
	{  cvt.f32.f16 %f183, %rs55;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f184, %rs46;}

	// end inline asm
	fma.rn.f32 	%f373, %f183, %f184, %f373;
	ld.shared.u16 	%rs63, [%r183+-2048];
	// begin inline asm
	{  cvt.f32.f16 %f185, %rs63;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f186, %rs40;}

	// end inline asm
	fma.rn.f32 	%f372, %f185, %f186, %f372;
	// begin inline asm
	{  cvt.f32.f16 %f187, %rs63;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f188, %rs42;}

	// end inline asm
	fma.rn.f32 	%f371, %f187, %f188, %f371;
	// begin inline asm
	{  cvt.f32.f16 %f189, %rs63;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f190, %rs44;}

	// end inline asm
	fma.rn.f32 	%f370, %f189, %f190, %f370;
	// begin inline asm
	{  cvt.f32.f16 %f191, %rs63;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f192, %rs46;}

	// end inline asm
	fma.rn.f32 	%f369, %f191, %f192, %f369;
	ld.shared.u16 	%rs71, [%r183+-1536];
	// begin inline asm
	{  cvt.f32.f16 %f193, %rs71;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f194, %rs40;}

	// end inline asm
	fma.rn.f32 	%f368, %f193, %f194, %f368;
	// begin inline asm
	{  cvt.f32.f16 %f195, %rs71;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f196, %rs42;}

	// end inline asm
	fma.rn.f32 	%f367, %f195, %f196, %f367;
	// begin inline asm
	{  cvt.f32.f16 %f197, %rs71;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f198, %rs44;}

	// end inline asm
	fma.rn.f32 	%f366, %f197, %f198, %f366;
	// begin inline asm
	{  cvt.f32.f16 %f199, %rs71;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f200, %rs46;}

	// end inline asm
	fma.rn.f32 	%f365, %f199, %f200, %f365;
	ld.shared.u16 	%rs79, [%r183+-1024];
	// begin inline asm
	{  cvt.f32.f16 %f201, %rs79;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f202, %rs40;}

	// end inline asm
	fma.rn.f32 	%f364, %f201, %f202, %f364;
	// begin inline asm
	{  cvt.f32.f16 %f203, %rs79;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f204, %rs42;}

	// end inline asm
	fma.rn.f32 	%f363, %f203, %f204, %f363;
	// begin inline asm
	{  cvt.f32.f16 %f205, %rs79;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f206, %rs44;}

	// end inline asm
	fma.rn.f32 	%f362, %f205, %f206, %f362;
	// begin inline asm
	{  cvt.f32.f16 %f207, %rs79;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f208, %rs46;}

	// end inline asm
	fma.rn.f32 	%f361, %f207, %f208, %f361;
	ld.shared.u16 	%rs87, [%r183+-512];
	// begin inline asm
	{  cvt.f32.f16 %f209, %rs87;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f210, %rs40;}

	// end inline asm
	fma.rn.f32 	%f360, %f209, %f210, %f360;
	// begin inline asm
	{  cvt.f32.f16 %f211, %rs87;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f212, %rs42;}

	// end inline asm
	fma.rn.f32 	%f359, %f211, %f212, %f359;
	// begin inline asm
	{  cvt.f32.f16 %f213, %rs87;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f214, %rs44;}

	// end inline asm
	fma.rn.f32 	%f358, %f213, %f214, %f358;
	// begin inline asm
	{  cvt.f32.f16 %f215, %rs87;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f216, %rs46;}

	// end inline asm
	fma.rn.f32 	%f357, %f215, %f216, %f357;
	ld.shared.u16 	%rs95, [%r183];
	// begin inline asm
	{  cvt.f32.f16 %f217, %rs95;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f218, %rs40;}

	// end inline asm
	fma.rn.f32 	%f356, %f217, %f218, %f356;
	// begin inline asm
	{  cvt.f32.f16 %f219, %rs95;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f220, %rs42;}

	// end inline asm
	fma.rn.f32 	%f355, %f219, %f220, %f355;
	// begin inline asm
	{  cvt.f32.f16 %f221, %rs95;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f222, %rs44;}

	// end inline asm
	fma.rn.f32 	%f354, %f221, %f222, %f354;
	// begin inline asm
	{  cvt.f32.f16 %f223, %rs95;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f224, %rs46;}

	// end inline asm
	fma.rn.f32 	%f353, %f223, %f224, %f353;
	add.s32 	%r183, %r183, 2;
	add.s32 	%r181, %r181, 128;
	add.s32 	%r182, %r182, 2;
	setp.ne.s32 	%p6, %r182, 4160;
	@%p6 bra 	$L__BB0_11;

	bar.sync 	0;
	add.s32 	%r172, %r172, 1;
	setp.lt.u32 	%p7, %r172, 36;
	@%p7 bra 	$L__BB0_1;

	// begin inline asm
	{  cvt.rn.f16.f32 %rs103, %f384;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f226, %rs103;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs106, %f383;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f229, %rs106;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs109, %f382;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f232, %rs109;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs112, %f381;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f235, %rs112;}

	// end inline asm
	add.s32 	%r128, %r94, %r92;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs114, %f235;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs111, %f232;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs108, %f229;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs105, %f226;}

	// end inline asm
	st.shared.v4.u16 	[%r128], {%rs105, %rs108, %rs111, %rs114};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs115, %f380;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f238, %rs115;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs118, %f379;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f241, %rs118;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs121, %f378;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f244, %rs121;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs124, %f377;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f247, %rs124;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs126, %f247;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs123, %f244;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs120, %f241;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs117, %f238;}

	// end inline asm
	st.shared.v4.u16 	[%r128+1024], {%rs117, %rs120, %rs123, %rs126};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs127, %f376;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f250, %rs127;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs130, %f375;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f253, %rs130;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs133, %f374;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f256, %rs133;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs136, %f373;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f259, %rs136;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs138, %f259;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs135, %f256;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs132, %f253;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs129, %f250;}

	// end inline asm
	st.shared.v4.u16 	[%r128+2048], {%rs129, %rs132, %rs135, %rs138};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs139, %f372;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f262, %rs139;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs142, %f371;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f265, %rs142;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs145, %f370;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f268, %rs145;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs148, %f369;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f271, %rs148;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs150, %f271;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs147, %f268;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs144, %f265;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs141, %f262;}

	// end inline asm
	st.shared.v4.u16 	[%r128+3072], {%rs141, %rs144, %rs147, %rs150};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs151, %f368;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f274, %rs151;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs154, %f367;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f277, %rs154;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs157, %f366;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f280, %rs157;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs160, %f365;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f283, %rs160;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs162, %f283;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs159, %f280;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs156, %f277;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs153, %f274;}

	// end inline asm
	st.shared.v4.u16 	[%r128+4096], {%rs153, %rs156, %rs159, %rs162};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs163, %f364;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f286, %rs163;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs166, %f363;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f289, %rs166;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs169, %f362;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f292, %rs169;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs172, %f361;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f295, %rs172;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs174, %f295;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs171, %f292;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs168, %f289;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs165, %f286;}

	// end inline asm
	st.shared.v4.u16 	[%r128+5120], {%rs165, %rs168, %rs171, %rs174};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs175, %f360;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f298, %rs175;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs178, %f359;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f301, %rs178;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs181, %f358;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f304, %rs181;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs184, %f357;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f307, %rs184;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs186, %f307;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs183, %f304;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs180, %f301;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs177, %f298;}

	// end inline asm
	st.shared.v4.u16 	[%r128+6144], {%rs177, %rs180, %rs183, %rs186};
	// begin inline asm
	{  cvt.rn.f16.f32 %rs187, %f356;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f310, %rs187;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs190, %f355;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f313, %rs190;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs193, %f354;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f316, %rs193;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs196, %f353;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f319, %rs196;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs198, %f319;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs195, %f316;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs192, %f313;}

	// end inline asm
	// begin inline asm
	{  cvt.rn.f16.f32 %rs189, %f310;}

	// end inline asm
	st.shared.v4.u16 	[%r128+7168], {%rs189, %rs192, %rs195, %rs198};
	bar.sync 	0;
	shl.b32 	%r130, %r40, 13;
	add.s32 	%r138, %r105, %r130;
	cvta.to.global.u64 	%rd10, %rd3;
	mul.wide.s32 	%rd11, %r138, 2;
	add.s64 	%rd12, %rd10, %rd11;
	ld.shared.v4.u32 	{%r140, %r141, %r142, %r143}, [%r116];
	st.global.v4.u32 	[%rd12], {%r140, %r141, %r142, %r143};
	ld.shared.v4.u32 	{%r148, %r149, %r150, %r151}, [%r116+2048];
	st.global.v4.u32 	[%rd12+4096], {%r148, %r149, %r150, %r151};
	ld.shared.v4.u32 	{%r156, %r157, %r158, %r159}, [%r116+4096];
	st.global.v4.u32 	[%rd12+8192], {%r156, %r157, %r158, %r159};
	ld.shared.v4.u32 	{%r164, %r165, %r166, %r167}, [%r116+6144];
	st.global.v4.u32 	[%rd12+12288], {%r164, %r165, %r166, %r167};
	ret;

}

